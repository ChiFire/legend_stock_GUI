kept_rows_Train_One<-floor(Train_One_No/n_folds)*n_folds
Train_Two <- data[ which(data$TARGET=="Two"), ]
Train_One <- data[ which(data$TARGET=="One"), ]
#shuffling
Train_Two<-Train_Two[sample(nrow(Train_Two),kept_rows_Train_Two),]
Train_One<-Train_One[sample(nrow(Train_One),kept_rows_Train_One),]
#naming the folds ID
folds_Train_Two <- cut(seq(1,nrow(Train_Two)),breaks=n_folds,labels=FALSE)
folds_Train_One <- cut(seq(1,nrow(Train_One)),breaks=n_folds,labels=FALSE)
Train_Two$folds<-folds_Train_Two
Train_One$folds<-folds_Train_One
Train<-rbind(Train_Two,Train_One)
###### end of modeling for ten folds
#____________setup ensemble modeling ____
control_<- trainControl(method = "none",  savePredictions = TRUE,
verboseIter = FALSE,returnResamp = "all",classProbs = TRUE, summaryFunction = twoClassSummary)
rows_no<-floor(nrow(Train)/n_folds)
resul_log_raw<-matrix(0, ncol = n_folds, nrow = rows_no)
resul_log_raw<-as.data.frame(resul_log_raw)
resul_log_prob<-matrix(0, ncol = n_folds, nrow = rows_no)
resul_log_prob<-as.data.frame(resul_log_prob)
resul_svm_raw<-matrix(0, ncol = n_folds, nrow = rows_no)
resul_svm_raw<-as.data.frame(resul_svm_raw)
resul_svm_prob<-matrix(0, ncol = n_folds, nrow = rows_no)
resul_svm_prob<-as.data.frame(resul_svm_prob)
resul_CRT_raw<-matrix(0, ncol = n_folds, nrow = rows_no)
resul_CRT_raw<-as.data.frame(resul_CRT_raw)
resul_CRT_prob<-matrix(0, ncol = n_folds, nrow = rows_no)
resul_CRT_prob<-as.data.frame(resul_CRT_prob)
resul_NNET_raw<-matrix(0, ncol = n_folds, nrow = rows_no)
resul_NNET_raw<-as.data.frame(resul_NNET_raw)
resul_NNET_prob<-matrix(0, ncol = n_folds, nrow = rows_no)
resul_NNET_prob<-as.data.frame(resul_NNET_prob)
resul_tan_raw<-matrix(0, ncol = n_folds, nrow = rows_no)
resul_tan_raw<-as.data.frame(resul_tan_raw)
resul_tan_prob<-matrix(0, ncol = n_folds, nrow = rows_no)
resul_tan_prob<-as.data.frame(resul_tan_prob)
resul_fusion_prob<-matrix(0, ncol = n_folds, nrow = rows_no)
resul_fusion_prob<-as.data.frame(resul_fusion_prob)
resul_log_imp<-matrix(0, ncol = n_folds, nrow = ncol(data)-1)
resul_log_imp<-as.data.frame(resul_log_imp)
names(resul_log_imp) <- paste("fold", 1:n_folds, sep = "")
resul_svm_imp<-matrix(0, ncol = n_folds, nrow = ncol(data)-1)
resul_svm_imp<-as.data.frame(resul_svm_imp)
names(resul_svm_imp) <- paste("fold", 1:n_folds, sep = "")
resul_CRT_imp<-matrix(0, ncol = n_folds, nrow = ncol(data)-1)
resul_CRT_imp<-as.data.frame(resul_CRT_imp)
names(resul_CRT_imp) <- paste("fold", 1:n_folds, sep = "")
resul_NNET_imp<-matrix(0, ncol = n_folds, nrow = ncol(data)-1)
resul_NNET_imp<-as.data.frame(resul_NNET_imp)
names(resul_NNET_imp) <- paste("fold", 1:n_folds, sep = "")
resul_tan_imp<-matrix(0, ncol = n_folds, nrow = ncol(data)-1)
resul_tan_imp<-as.data.frame(resul_tan_imp)
names(resul_tan_imp) <- paste("fold", 1:n_folds, sep = "")
rownames(resul_log_imp)<-colnames(data[,1:ncol(data)-1])
resul_log_imp$variables<-colnames(data[,1:ncol(data)-1])
rownames(resul_svm_imp)<-colnames(data[,1:ncol(data)-1])
resul_svm_imp$variables<-colnames(data[,1:ncol(data)-1])
rownames(resul_CRT_imp)<-colnames(data[,1:ncol(data)-1])
resul_CRT_imp$variables<-colnames(data[,1:ncol(data)-1])
rownames(resul_NNET_imp)<-colnames(data[,1:ncol(data)-1])
resul_NNET_imp$variables<-colnames(data[,1:ncol(data)-1])
rownames(resul_tan_imp)<-colnames(data[,1:ncol(data)-1])
resul_tan_imp$variables<-colnames(data[,1:ncol(data)-1])
if(conso_feat=="Y"){
consolidated_vars<-input_object$itself$consolidated
vars<-as.character(consolidated_vars$variables)
if(input_object$parameters["lit_run","content"]!="K"){
lit_vars<-input_object$lit
vars<-rbind(consolidated_vars,lit_vars)
vars<-as.data.frame(vars[!duplicated(vars$variables), ])
names(vars)<-"variables"
vars<-na.omit(vars)
vars<-as.character(vars$variables)}
tan_vars<-vars
formula_format<-paste("TARGET ~ ",paste(vars, collapse="+"),sep = "")
formula<-as.formula(formula_format)}
if(conso_feat=="N"){
vars_log<-input_object$itself$log
vars_svm<-input_object$itself$svm
vars_CRT<-input_object$itself$crt
vars_NNET<-input_object$itself$nnet
vars_tan<-input_object$itself$tan
log_vars<-as.character(vars_log$variables)
svm_vars<-as.character(vars_svm$variables)
CRT_vars<-as.character(vars_CRT$variables)
NNET_vars<-as.character(vars_NNET$variables)
tan_vars<-as.character(vars_tan$variables)
if(input_object$parameters["lit_run","content"]!="K"){
lit_vars<-input_object$lit
log_vars<-rbind(vars_log,lit_vars)
log_vars<-as.data.frame(log_vars[!duplicated(log_vars$variables), ])
names(log_vars)<-"variables"
log_vars<-na.omit(log_vars)
log_vars<-as.character(log_vars$variables)
svm_vars<-rbind(vars_svm,lit_vars)
svm_vars<-as.data.frame(svm_vars[!duplicated(svm_vars$variables), ])
names(svm_vars)<-"variables"
svm_vars<-na.omit(svm_vars)
svm_vars<-as.character(svm_vars$variables)
CRT_vars<-rbind(vars_CRT,lit_vars)
CRT_vars<-as.data.frame(CRT_vars[!duplicated(CRT_vars$variables), ])
names(CRT_vars)<-"variables"
CRT_vars<-na.omit(CRT_vars)
CRT_vars<-as.character(CRT_vars$variables)
NNET_vars<-rbind(vars_NNET,lit_vars)
NNET_vars<-as.data.frame(NNET_vars[!duplicated(NNET_vars$variables), ])
names(NNET_vars)<-"variables"
NNET_vars<-na.omit(NNET_vars)
NNET_vars<-as.character(NNET_vars$variables)
tan_vars<-rbind(vars_tan,lit_vars)
tan_vars<-as.data.frame(tan_vars[!duplicated(tan_vars$variables), ])
names(tan_vars)<-"variables"
tan_vars<-na.omit(tan_vars)
tan_vars<-as.character(tan_vars$variables)}
formula_format_log<-paste("TARGET ~ ",paste(log_vars, collapse="+"),sep = "")
formula_format_svm<-paste("TARGET ~ ",paste(svm_vars, collapse="+"),sep = "")
formula_format_CRT<-paste("TARGET ~ ",paste(CRT_vars, collapse="+"),sep = "")
formula_format_NNET<-paste("TARGET ~ ",paste(NNET_vars, collapse="+"),sep = "")
formula_format_tan<-paste("TARGET ~ ",paste(tan_vars, collapse="+"),sep = "")
formula_log<-as.formula(formula_format_log)
formula_svm<-as.formula(formula_format_svm)
formula_CRT<-as.formula(formula_format_CRT)
formula_NNET<-as.formula(formula_format_NNET)
formula_tan<-as.formula(formula_format_tan)
}
#_______model training and testing_____
library(stringr)
i<-3
##model training__
for ( i in 1: n_folds){
test_data<-Train[Train$folds == i,]
train_data<-Train[Train$folds != i,]
tt<-as.data.frame(table(train_data$TARGET))
table(train_data$TARGET)
common<-tt$Freq[1]
rare<-tt$Freq[2]
k<-1
if(common<rare){
temp_<-common
common<-rare
rare<-temp_
}
if(B_alg==1){
H_por_low<-1
H_por_high<-1
H_por_low<-(1/H_por_low)
H_por_high<-H_por_high*100
perc_over<-100*(common-rare)/(rare*H_por_low)*k
perc_under<-100*(1/perc_over)*common
train_data<-SMOTE(TARGET ~ ., train_data, perc.over = perc_over,perc.under = (((perc_over/100)+1)/(perc_over/100))*H_por_high)
table(train_data$TARGET)
}
if(B_alg==2){
train_data2<-ovun.sample(TARGET ~ .,data=train_data,method="under")
train_data<-train_data2$data
table(train_data$TARGET)
}
if(B_alg==3){
H_por_low_<-(1/H_por_low)
H_por_high_<-H_por_high*100
perc_over<-100*(common-rare)/(rare*(((common-rare)/(rare*H_por_low_))))
train_data<-SMOTE(TARGET ~ ., train_data, perc.over = perc_over,perc.under = (((perc_over/100)+1)/(perc_over/100))*H_por_high_)
table(train_data$TARGET)
}
balanced_data_train<-paste(c(analysis_folder,"balanced data/","_",method_fs,"_",is_multi,"_","_",is_bal,"_","fold-",i,"_","balanced-train.csv"),collapse = "")
balanced_data_test<-paste(c(analysis_folder,"balanced data/","_",method_fs,"_",is_multi,"_","_",is_bal,"_","fold-",i,"_","balanced-test.csv"),collapse = "")
write.csv(train_data,balanced_data_train)
write.csv(test_data,balanced_data_test)
# keeping the record of Target distribution in each fold
dis_train<-paste(c("K_",i),collapse = "")
input_object$folds_dist[[dis_train]]<-table(train_data$TARGET)
# Recording train and test folds
name_train<-paste(c("train_fold_",i),collapse = "")
input_object[[name_train]]<-train_data
name_test<-paste(c("test_fold_",i),collapse = "")
input_object[[name_test]]<-test_data
# Recording address of train and test folds
name_train_add<-paste(c("train_fold_add_",i),collapse = "")
input_object[[name_train_add]]<-balanced_data_train
name_test_add<-paste(c("test_fold_add_",i),collapse = "")
input_object[[name_test_add]]<-balanced_data_test
# train_data and test data distribution
name_dist<-paste(c("fold_dist_",i),collapse = "")
input_object[[name_dist]]<-table(train_data$TARGET)
train_data$folds<-NULL
if(conso_feat=="N"){formula<-formula_log}
mod_log <-train(formula,  data=train_data, method="glm", family="binomial",
trControl = control_, tuneLength = 10, metric="ROC")
if(conso_feat=="N"){formula<-formula_CRT}
mod_CRT <-train(formula,  data=train_data, method="rpart1SE",
trControl = control_, tuneLength = 10, metric="ROC")
if(conso_feat=="N"){formula<-formula_svm}
mod_svm<-train(formula,  data=train_data, method="svmRadial", family="binomial",
trControl = control_,  tuneGrid=expand.grid(C=0.5, sigma=0.0001),
tuneLength = 10)
if(conso_feat=="N"){formula<-formula_NNET}
mod_NNET <-train(formula,  data=train_data, method="nnet", family="binomial",
trControl = control_,  tuneGrid=expand.grid(size=5, decay=0.1), MaxNWts=20000,
tuneLength = 10)
##===making data ready for TAN
# disceretizing train and test
data_tan_train<-train_data
y_tr<-data_tan_train$TARGET
data_tan_train$TARGET<-NULL
data_tan_train$folds<-NULL
data_tan_train$type<-"tr"
data_tan_test<-test_data
y_ts<-data_tan_test$TARGET
data_tan_test$TARGET<-NULL
data_tan_test$folds<-NULL
data_tan_test$type<-"ts"
data_tan<-rbind(data_tan_train,data_tan_test)
for(j in 1:(ncol(data_tan)-1)){
if(is.numeric(data_tan_train[,j])){
data_tan[,j]<-discretize(data_tan[,j],method="interval",categories = 10)
}
}
data_tan_train<-data_tan[which(data_tan$type=="tr"),]
data_tan_test<-data_tan[which(data_tan$type=="ts"),]
data_tan_train$type<-NULL
data_tan_test$type<-NULL
data_tan_train<-data_tan_train[, which(names(data_tan_train) %in% tan_vars)]
mod_tan <- train(data_tan_train, y_tr, method="tan",
trControl = control_, tuneGrid = expand.grid(score= "aic", smooth=0.5),
tuneLength = 10)
VarsData_Phase<-input_object$VarsData_Phase
resul_log_imp<-matrix_filler(i,resul_log_imp,model_imp_exc(mod_log,VarsData_Phase),"variables")
resul_svm_imp<-matrix_filler(i,resul_svm_imp,model_imp_exc(mod_svm,VarsData_Phase),"variables")
resul_CRT_imp<-matrix_filler(i,resul_CRT_imp,model_imp_exc(mod_CRT,VarsData_Phase),"variables")
resul_NNET_imp<-matrix_filler(i,resul_NNET_imp,model_imp_exc(mod_NNET,VarsData_Phase),"variables")
resul_tan_imp<-matrix_filler(i,resul_tan_imp,model_imp_exc(mod_tan,VarsData_Phase),"variables")
##model testing___
resul_log_raw[,i]<-predict(mod_log, newdata=test_data, type="raw")
resul_log_prob[,i]<-predict(mod_log, newdata=test_data, type="prob")
resul_svm_raw[,i]<-predict(mod_svm, newdata=test_data, type="raw")
resul_svm_prob[,i]<-predict(mod_svm, newdata=test_data, type="prob")
resul_CRT_raw[,i]<-predict(mod_CRT, newdata=test_data, type="raw")
resul_CRT_prob[,i]<-predict(mod_CRT, newdata=test_data, type="prob")
resul_NNET_raw[,i]<-predict(mod_NNET, newdata=test_data, type="raw")
resul_NNET_prob[,i]<-predict(mod_NNET, newdata=test_data, type="prob")
resul_tan_raw[,i]<-predict(mod_tan, newdata=data_tan_test, type="raw")
resul_tan_prob[,i]<-predict(mod_tan, newdata=data_tan_test, type="prob")
}
write.csv(resul_log_imp,log_imp_folds_file)
write.csv(resul_svm_imp,svm_imp_folds_file)
write.csv(resul_CRT_imp,CRT_imp_folds_file)
write.csv(resul_NNET_imp,NNET_imp_folds_file)
write.csv(resul_tan_imp,NNET_imp_folds_file)
resul_fusion_prob<-(resul_log_prob+resul_svm_prob+resul_CRT_prob+resul_NNET_prob)/4
#___________Specifying Tables for YES and NO probabilities_____________
resul_log_prob_YES<-1-resul_log_prob
resul_svm_prob_YES<-1-resul_svm_prob
resul_CRT_prob_YES<-1-resul_CRT_prob
resul_NNET_prob_YES<-1-resul_NNET_prob
resul_tan_prob_YES<-1-resul_tan_prob
resul_fusion_prob_YES<-((resul_log_prob_YES+resul_svm_prob_YES+resul_CRT_prob_YES+resul_NNET_prob_YES)/4)
#____________________setting up dataframes for recording performance of models
performance_log<-matrix(0, ncol = n_folds, nrow = 4)
performance_log<-as.data.frame(performance_log)
performance_svm<-matrix(0, ncol = n_folds, nrow = 4)
performance_svm<-as.data.frame(performance_svm)
performance_CRT<-matrix(0, ncol = n_folds, nrow = 4)
performance_CRT<-as.data.frame(performance_CRT)
performance_NNET<-matrix(0, ncol = n_folds, nrow = 4)
performance_NNET<-as.data.frame(performance_NNET)
performance_tan<-matrix(0, ncol = n_folds, nrow = 4)
performance_tan<-as.data.frame(performance_tan)
performance_fusion<-matrix(0, ncol = n_folds, nrow = 4)
performance_fusion<-as.data.frame(performance_fusion)
row.names(performance_log) <- c("ROC","ACCURACY","SENSITIVITY","SPECIFICITY")
names(performance_log)[1:n_folds] <- paste("Fold", 1:n_folds, sep="")
row.names(performance_svm) <- c("ROC","ACCURACY","SENSITIVITY","SPECIFICITY")
names(performance_svm)[1:n_folds] <- paste("Fold", 1:n_folds, sep="")
row.names(performance_CRT) <- c("ROC","ACCURACY","SENSITIVITY","SPECIFICITY")
names(performance_CRT)[1:n_folds] <- paste("Fold", 1:n_folds, sep="")
row.names(performance_NNET) <- c("ROC","ACCURACY","SENSITIVITY","SPECIFICITY")
names(performance_NNET)[1:n_folds] <- paste("Fold", 1:n_folds, sep="")
row.names(performance_tan) <- c("ROC","ACCURACY","SENSITIVITY","SPECIFICITY")
names(performance_tan)[1:n_folds] <- paste("Fold", 1:n_folds, sep="")
row.names(performance_fusion) <- c("ROC","ACCURACY","SENSITIVITY","SPECIFICITY")
names(performance_fusion)[1:n_folds] <- paste("Fold", 1:n_folds, sep="")
#______a change just for calculating accuracy
levels(Train$TARGET)[1] <- 0
levels(Train$TARGET)[2]  <- 1
#_________________________calculating the performance of the models_____________
i<-3
library(AUC)
for (i in 1:n_folds){
temp<-Train[Train$folds == i,]
levels(temp$TARGET)[1] <- "One"
levels(temp$TARGET)[2]  <- "Two"
test_table<-temp$TARGET
performance_log[1,i]<-AUC:: auc(roc(resul_log_prob_YES[,i],test_table))
performance_svm[1,i]<-AUC:: auc(roc(resul_svm_prob_YES[,i],test_table))
performance_CRT[1,i]<-AUC:: auc(roc(resul_CRT_prob_YES[,i],test_table))
performance_NNET[1,i]<-AUC:: auc(roc(resul_NNET_prob_YES[,i],test_table))
performance_tan[1,i]<-AUC:: auc(roc(resul_tan_prob_YES[,i],test_table))
performance_fusion[1,i]<-AUC:: auc(roc(resul_fusion_prob[,i],test_table))
performance_log[3,i]<-caret:: sensitivity(resul_log_raw[,i],test_table)
performance_svm[3,i]<-caret:: sensitivity(resul_svm_raw[,i],test_table)
performance_CRT[3,i]<-caret:: sensitivity(resul_CRT_raw[,i],test_table)
performance_NNET[3,i]<-caret:: sensitivity(resul_NNET_raw[,i],test_table)
performance_tan[3,i]<-caret:: sensitivity(resul_tan_raw[,i],test_table)
performance_log[4,i]<-caret:: specificity(resul_log_raw[,i],test_table)
performance_svm[4,i]<-caret:: specificity(resul_svm_raw[,i],test_table)
performance_CRT[4,i]<-caret:: specificity(resul_CRT_raw[,i],test_table)
performance_NNET[4,i]<-caret:: specificity(resul_NNET_raw[,i],test_table)
performance_tan[4,i]<-caret:: specificity(resul_tan_raw[,i],test_table)
performance_log[2,i]<-(as.data.frame(confusionMatrix(resul_log_raw[,i],test_table)$overall))[1,]
performance_svm[2,i]<-(as.data.frame(confusionMatrix(resul_svm_raw[,i],test_table)$overall))[1,]
performance_CRT[2,i]<-(as.data.frame(confusionMatrix(resul_CRT_raw[,i],test_table)$overall))[1,]
performance_NNET[2,i]<-(as.data.frame(confusionMatrix(resul_NNET_raw[,i],test_table)$overall))[1,]
performance_tan[2,i]<-(as.data.frame(confusionMatrix(resul_tan_raw[,i],test_table)$overall))[1,]
}
for(i in 1:nrow(performance_log)){
performance_log$avg[i]<-(sum(performance_log[i,1:n_folds])/n_folds)
performance_svm$avg[i]<-(sum(performance_svm[i,1:n_folds])/n_folds)
performance_CRT$avg[i]<-(sum(performance_CRT[i,1:n_folds])/n_folds)
performance_NNET$avg[i]<-(sum(performance_NNET[i,1:n_folds])/n_folds)
performance_tan$avg[i]<-(sum(performance_tan[i,1:n_folds])/n_folds)
}
write.csv(performance_log,log_perf_folds_file)
write.csv(performance_svm,svm_perf_folds_file)
write.csv(performance_CRT,CRT_perf_folds_file)
write.csv(performance_NNET,NNET_perf_folds_file)
write.csv(performance_tan,tan_perf_folds_file)
#______This for finding weighte average for importance of variables based on AUC (ROC)
resul_log_imp_tmp<-resul_log_imp[,1:n_folds]
resul_log_imp_tmp[]<-NA
resul_svm_imp_tmp<-resul_svm_imp[,1:n_folds]
resul_svm_imp_tmp[]<-NA
resul_CRT_imp_tmp<-resul_CRT_imp[,1:n_folds]
resul_CRT_imp_tmp[]<-NA
resul_NNET_imp_tmp<-resul_NNET_imp[,1:n_folds]
resul_NNET_imp_tmp[]<-NA
resul_tan_imp_tmp<-resul_tan_imp[,1:n_folds]
resul_tan_imp_tmp[]<-NA
for(i in 1:n_folds){
resul_log_imp_tmp[,i]<-resul_log_imp[,i]*performance_log[1,i]
resul_svm_imp_tmp[,i]<-resul_svm_imp[,i]*performance_svm[1,i]
resul_CRT_imp_tmp[,i]<-resul_CRT_imp[,i]*performance_CRT[1,i]
resul_NNET_imp_tmp[,i]<-resul_NNET_imp[,i]*performance_NNET[1,i]
resul_tan_imp_tmp[,i]<-resul_tan_imp[,i]*performance_tan[1,i]
}
for(i in 1:nrow(resul_log_imp_tmp)){
resul_log_imp_tmp$weigh_avg[i]<-(sum(resul_log_imp_tmp[i,1:n_folds]))/sum(performance_log[1,1:n_folds])
resul_svm_imp_tmp$weigh_avg[i]<-(sum(resul_svm_imp_tmp[i,1:n_folds]))/sum(performance_svm[1,1:n_folds])
resul_CRT_imp_tmp$weigh_avg[i]<-(sum(resul_CRT_imp_tmp[i,1:n_folds]))/sum(performance_CRT[1,1:n_folds])
resul_NNET_imp_tmp$weigh_avg[i]<-(sum(resul_NNET_imp_tmp[i,1:n_folds]))/sum(performance_NNET[1,1:n_folds])
resul_tan_imp_tmp$weigh_avg[i]<-(sum(resul_tan_imp_tmp[i,1:n_folds]))/sum(performance_tan[1,1:n_folds])
}
resul_log_imp$Weigh_AUC_AVG<-resul_log_imp_tmp$weigh_avg
resul_svm_imp$Weigh_AUC_AVG<-resul_svm_imp_tmp$weigh_avg
resul_CRT_imp$Weigh_AUC_AVG<-resul_CRT_imp_tmp$weigh_avg
resul_NNET_imp$Weigh_AUC_AVG<-resul_NNET_imp_tmp$weigh_avg
resul_tan_imp$Weigh_AUC_AVG<-resul_tan_imp_tmp$weigh_avg
resul_log_imp_tmp<-NULL
resul_svm_imp_tmp<-NULL
resul_CRT_imp_tmp<-NULL
resul_NNET_imp_tmp<-NULL
resul_tan_imp_tmp<-NULL
write.csv(resul_log_imp,Avg_log_perf_folds_file)
write.csv(resul_svm_imp,Avg_svm_perf_folds_file)
write.csv(resul_CRT_imp,Avg_CRT_perf_folds_file)
write.csv(resul_NNET_imp,Avg_NNET_perf_folds_file)
write.csv(resul_tan_imp,Avg_tan_perf_folds_file)
input_object$performance$performance_log<-performance_log
input_object$performance$performance_svm<-performance_svm
input_object$performance$performance_CRT<-performance_CRT
input_object$performance$performance_NNET<-performance_NNET
input_object$performance$performance_tan<-performance_tan
#______end of the weighted average module_______
}
return(input_object)
}
#=============================================================
#==============Reporting Module
#=============================================================
# Start writing to a Report file
Report<-function(input_object){
balanc_proc<-input_object$parameters["balanc_proc","content"]
Method_output<-
method_fs<-input_object$settings["method_fs","content"]
n_folds<-input_object$parameters["n_folds","content"]
is_bal<-input_object$settings["is_bal","content"]
is_multi<-input_object$settings["is_multi","content"]
analysis_folder<-input_object$settings["analysis_folder","content"]
H_por_low<-as.numeric(input_object$parameters["H_por_low","content"])
H_por_high<-as.numeric(input_object$parameters["H_por_high","content"])
data<-input_object$dataset
sink(input_object$settings["Out_put_file","content"])
cat("The feature selection method is: ","\n")
cat(input_object$settings["FS_Method_output","content"],"\n")
cat(paste(c("Type of the dependant variable is: ",input_object$settings["Method_output","content"]),collapse = ""),"\n")
cat(paste(c("Number of folds is: ",n_folds),collapse = ""),"\n")
if(balanc_proc=="Y"){
cat("Sample balancing is used","\n")
cat("The Sample balancing algorithm is: ",is_bal,"\n")
if(input_object$parameters["B_alg","content"]==3){
cat("Proportion of differences that you want to increase the minority is : ",H_por_low,"\n")
cat("Multiplication for the size of minority as the size of majority : ",H_por_high,"\n")
}
}else{cat("Sample balancing is not used","\n")}
cat("=====================================\n")
cat("The distribution of data without Sample Balancing is:","\n")
cat(table(data$TARGET),"\n")
cat("The distribution of data with Sample Balancing in each loop is:","\n")
for(i in 1:n_folds){
cat(paste(c("fold ",i,":"),collapse = ""),"\n")
dis_train<-paste(c("K_",i),collapse = "")
cat(input_object$folds_dist[[dis_train]],"\n")
}
cat("=====================================\n")
cat("The performance of logistic Regression is:","\n")
print(rowMeans(input_object$performance$performance_log))
cat("\n")
cat("The performance of SVM is:","\n")
print(rowMeans(input_object$performance$performance_svm))
cat("\n")
cat("The performance of CRT is:","\n")
print(rowMeans(input_object$performance$performance_CRT))
cat("The performance of Neural Network is:","\n")
print(rowMeans(input_object$performance$performance_NNET))
cat("The performance of TAN is:","\n")
print(rowMeans(input_object$performance$performance_tan))
cat("=====================================\n")
cat("Ouput of Analysis:\n",input_object$settings["Out_put_file","content"],"\n")
cat("=====================================\n")
cat("Important Features achieved by specific Machine Learning algorithms: \n")
if(as.numeric(input_object$parameters["FS_Method_1","content"])>0){
cat("Random Forest :\n",input_object$settings["Random_Forrest_Location","content"],"\n")}
if(as.numeric(input_object$parameters["FS_Method_2","content"])>0){
cat("LASSO :\n",input_object$settings["Lasso_location","content"],"\n")}
if(as.numeric(input_object$parameters["FS_Method_3","content"])>0){
cat("Fast Feature Selection :\n",input_object$settings["Fast_Feature_Location","content"],"\n")}
if(as.numeric(input_object$parameters["FS_Method_4","content"])>0){
cat("SVM Features :\n",input_object$settings["itself_svm_Location","content"],"\n")
cat("CRT Features :\n",input_object$settings["itself_CRT_Location","content"],"\n")
cat("Logistic Features :\n",input_object$settings["itself_log_Location","content"],"\n")
cat("Neural Network Features :\n",input_object$settings["itself_NNET_Location","content"],"\n")
cat("TAN Features :\n",input_object$settings["itself_tan_Location","content"],"\n")}
if(as.numeric(input_object$parameters["FS_Method_5","content"])>0){
cat("Literature :\n",input_object$settings["Literature_file","content"],"\n")}
if(as.numeric(input_object$parameters["FS_Method_4","content"])>0){
cat("Consolidation of all the Features :\n",input_object$settings["consolidate_Location","content"],"\n")}
cat("========================================================================== \n")
cat("Location of the (train/test) folds used in the prediction: \n")
for(i in 1:n_folds){
balanced_data_train<-paste(c(analysis_folder,"balanced data/","_",method_fs,"_",is_multi,"_","_",is_bal,"_","fold-",i,"_","balanced-train.csv"),collapse = "")
balanced_data_test<-paste(c(analysis_folder,"balanced data/","_",method_fs,"_",is_multi,"_","_",is_bal,"_","fold-",i,"_","balanced-test.csv"),collapse = "")
cat("Location of balanced train fold: ",i, balanced_data_train,"\n")
cat("Location of balanced test fold: ",i, balanced_data_test,"\n")
}
cat("========================================================================== \n")
cat("Performance of Machine Learning Algorithms in predictions: \n")
cat("Performance of the Logistic Regression :\n",input_object$settings["log_perf_folds_file","content"],"\n")
cat("Performance of the SVM :\n",input_object$settings["svm_perf_folds_file","content"],"\n")
cat("Performance of the CRT :\n",input_object$settings["CRT_perf_folds_file","content"],"\n")
cat("Performance of the Neural Network :\n",input_object$settings["NNET_perf_folds_file","content"],"\n")
cat("Performance of the TAN :\n",input_object$settings["tan_perf_folds_file","content"],"\n")
cat("========================================================================== \n")
cat("Importance of the selected features used by specific Machine Learning Algorithms for prediction: \n")
cat("Important variables in Logistic regression :\n",input_object$settings["log_imp_folds_file","content"],"\n")
cat("Important variables in SVM :\n",input_object$settings["svm_imp_folds_file","content"],"\n")
cat("Important variables in CRT :\n",input_object$settings["CRT_imp_folds_file","content"],"\n")
cat("Important variables in Neural Network :\n",input_object$settings["NNET_imp_folds_file","content"],"\n")
cat("Important variables in TAN :\n",input_object$settings["tan_imp_folds_file","content"],"\n")
cat("========================================================================== \n")
cat("Weighted mportance of the selected features used by specific Machine Learning Algorithms for prediction (Weighted on AUC) : \n")
cat("Weighted Performance and Average of the Logistic Regression :\n",input_object$settings["Avg_log_perf_folds_file","content"],"\n")
cat("Weighted Performance and Average of the SVM :\n",input_object$settings["Avg_svm_perf_folds_file","content"],"\n")
cat("Weighted Performance and Average of the CRT :\n",input_object$settings["Avg_CRT_perf_folds_file","content"],"\n")
cat("Weighted Performance and Average of the Neural Network :\n",input_object$settings["Avg_NNET_perf_folds_file","content"],"\n")
cat("Weighted Performance and Average of the TAN :\n",input_object$settings["Avg_tan_perf_folds_file","content"],"\n")
# colsing the file
sink()
#sending email to Hamid and Bin about the predicted stock
send.mail(from = "auburn.datascience@gmail.com",
to = c("hamid.ahady@gmail.com"),
subject = c( input_object$settings["Out_put_file_name","content"]),
body = sprintf("The address of the output file is:  %s", input_object$settings["Out_put_file","content"]) ,
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "auburn.datascience", passwd = "machinelearning", ssl = TRUE),
authenticate = TRUE,
send = TRUE,
attach.files = input_object$settings["Out_put_file","content"],
file.names = input_object$settings["Out_put_file_name","content"], # optional parameter
file.descriptions = c("It contains output of the analysis that you set"), # optional parameter
debug = TRUE)
#======================================
cat("Ouput of Analysis:\n",input_object$settings["Out_put_file","content"],"\n")
return(input_object)
}
input_object<-reading()
input_object<-initialization(input_object)
input_object<-data_cleaning(input_object)
input_object<-reading()
input_object<-initialization(input_object)
input_object<-data_cleaning(input_object)
input_object<-FFS(input_object)
input_object<-Random_Forrest(input_object)
aaa<-input_object$dataset
bbb<-input_object$Random_Forrest
View(aaa)
write.csv(aaa,"/Users/hamid/Dropbox/My R codes/Bin-Hamid/Stock_Prob/aaa.csv")
write.csv(bbb,"/Users/hamid/Dropbox/My R codes/Bin-Hamid/Stock_Prob/bbb.csv")
runApp('Dropbox/My R codes/Bin-Hamid/with GUI/chronicle/11-7-2016')
runApp('Dropbox/My R codes/Bin-Hamid/with GUI/chronicle/11-7-2016')
runApp('Dropbox/My R codes/Bin-Hamid/with GUI/chronicle/11-7-2016')
runApp('Dropbox/My R codes/Bin-Hamid/with GUI/chronicle/11-7-2016')
runApp('Dropbox/My R codes/Bin-Hamid/with GUI/chronicle/11-7-2016')
runApp('Dropbox/My R codes/Bin-Hamid/with GUI/chronicle/11-7-2016')
